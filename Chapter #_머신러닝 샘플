{"cells":[{"cell_type":"markdown","metadata":{"id":"Oneaf-WIfGtf"},"source":["# Chapter 04: 신경망 이해의 출발점: 퍼셉트론과 비선형 문제\n","\n","\n","### 실습 준비하기  \n","4장의 실습을 진행하려면 다음 라이브러리를 설치하고 불러와야 합니다."]},{"cell_type":"markdown","metadata":{"id":"uhyclYBwfGti"},"source":["Make sure DMBA package is available"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:38.296244Z","iopub.status.busy":"2023-06-26T14:18:38.295879Z","iopub.status.idle":"2023-06-26T14:18:39.856460Z","shell.execute_reply":"2023-06-26T14:18:39.855245Z"},"id":"fshzUg8rfGti","outputId":"c06c548e-8905-4ec8-cdc6-3eb3792233a3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Requirement already satisfied: dmba in /usr/local/lib/python3.11/site-packages (0.2.2)\r\n"]},{"name":"stdout","output_type":"stream","text":["\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n","\u001b[0m"]},{"name":"stdout","output_type":"stream","text":["Note: you may need to restart the kernel to use updated packages.\n"]}],"source":["pip install dmba"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:39.860624Z","iopub.status.busy":"2023-06-26T14:18:39.860303Z","iopub.status.idle":"2023-06-26T14:18:40.961472Z","shell.execute_reply":"2023-06-26T14:18:40.960447Z"},"id":"8Fq9SuyVfGtk","outputId":"68947b2d-500a-456c-c23e-254ae5a2aa86"},"outputs":[{"name":"stdout","output_type":"stream","text":["no display found. Using non-interactive Agg backend\n"]}],"source":["from pathlib import Path\n","\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.neural_network import MLPClassifier\n","import matplotlib.pyplot as plt\n","\n","import dmba\n","from dmba import classificationSummary\n","\n","%matplotlib inline"]},{"cell_type":"markdown","metadata":{"id":"rr0Bk5sffGtk"},"source":["## Table 11.2"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:40.964549Z","iopub.status.busy":"2023-06-26T14:18:40.964006Z","iopub.status.idle":"2023-06-26T14:18:40.992787Z","shell.execute_reply":"2023-06-26T14:18:40.991856Z"},"id":"HaSqrZaHfGtk","outputId":"6f9a7155-6f3b-4a0e-8512-fabb63f8fa23"},"outputs":[{"name":"stdout","output_type":"stream","text":["Intercepts\n","[array([0.13368042, 4.07247549, 7.00768105]), array([14.3074867])]\n","Weights\n","[array([[ -1.3065648 ,  -4.20427797, -13.29587331],\n","       [ -0.04399729,  -4.91606921,  -6.03356987]]), array([[ -0.27348314],\n","       [ -9.01211576],\n","       [-17.63504684]])]\n","   Obs.  Fat  Salt Acceptance   dislike      like\n","0     1  0.2   0.9       like  0.000490  0.999510\n","1     2  0.1   0.1    dislike  0.999994  0.000006\n","2     3  0.2   0.4    dislike  0.999741  0.000259\n","3     4  0.2   0.5    dislike  0.997368  0.002632\n","4     5  0.4   0.5       like  0.002133  0.997867\n","5     6  0.3   0.8       like  0.000075  0.999925\n"]}],"source":["example_df = dmba.load_data('TinyData.csv')\n","\n","predictors = ['Fat', 'Salt']\n","outcome = 'Acceptance'\n","\n","X = example_df[predictors]\n","y = example_df[outcome]\n","classes = sorted(y.unique())\n","\n","clf = MLPClassifier(hidden_layer_sizes=[3], activation='logistic', solver='lbfgs', random_state=1)\n","clf.fit(X, y)\n","clf.predict(X)\n","\n","# Network structure\n","print('Intercepts')\n","print(clf.intercepts_)\n","\n","print('Weights')\n","print(clf.coefs_)\n","\n","# Prediction\n","print(pd.concat([\n","    example_df,\n","    pd.DataFrame(clf.predict_proba(X), columns=classes)\n","], axis=1))"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:40.996098Z","iopub.status.busy":"2023-06-26T14:18:40.995333Z","iopub.status.idle":"2023-06-26T14:18:41.001314Z","shell.execute_reply":"2023-06-26T14:18:41.000384Z"},"id":"klp1NpNIfGtl","outputId":"c90e775f-ca9d-419a-a940-0188bf5bdcf2"},"outputs":[{"name":"stdout","output_type":"stream","text":["Hidden layer 2 => 3\n"," Intercepts:\n","  [0.13368042 4.07247549 7.00768105]\n"," Weights:\n","  [ -1.3065648   -4.20427797 -13.29587331]\n","  [-0.04399729 -4.91606921 -6.03356987]\n","\n","Output layer 3 => 1\n"," Intercepts:\n","  [14.3074867]\n"," Weights:\n","  [-0.27348314]\n","  [-9.01211576]\n","  [-17.63504684]\n","\n"]}],"source":["# Pretty print layers\n","for i, (weights, intercepts) in enumerate(zip(clf.coefs_, clf.intercepts_)):\n","    print('Hidden layer' if i == 0 else 'Output layer', '{0[0]} => {0[1]}'.format(weights.shape))\n","    print(' Intercepts:\\n ', intercepts)\n","    print(' Weights:')\n","    for weight in weights:\n","        print(' ', weight)\n","    print()\n"]},{"cell_type":"markdown","metadata":{"id":"JCt4f6UlfGtl"},"source":["## Table 11.3"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:41.003943Z","iopub.status.busy":"2023-06-26T14:18:41.003681Z","iopub.status.idle":"2023-06-26T14:18:41.011873Z","shell.execute_reply":"2023-06-26T14:18:41.011002Z"},"id":"n9lZc6ldfGtl","outputId":"1e934616-560f-4813-b0c5-783f589eabed"},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix (Accuracy 1.0000)\n","\n","        Prediction\n"," Actual dislike    like\n","dislike       3       0\n","   like       0       3\n"]}],"source":["classificationSummary(y, clf.predict(X), class_names=classes)"]},{"cell_type":"markdown","metadata":{"id":"_f0CozgtfGtm"},"source":["## Table 11.6"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:41.015075Z","iopub.status.busy":"2023-06-26T14:18:41.014387Z","iopub.status.idle":"2023-06-26T14:18:41.087665Z","shell.execute_reply":"2023-06-26T14:18:41.086742Z"},"id":"JCDY4QjgfGtm","outputId":"16541036-eed1-4909-d2ae-b798fe6cea73"},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix (Accuracy 0.8664)\n","\n","       Prediction\n","Actual   0   1   2\n","     0 331   0   1\n","     1   0 180   0\n","     2  30  49   8\n","Confusion Matrix (Accuracy 0.8550)\n","\n","       Prediction\n","Actual   0   1   2\n","     0 218   0   1\n","     1   0 119   0\n","     2  24  33   5\n"]}],"source":["accidents_df = dmba.load_data('accidentsnn.csv')\n","input_vars = ['ALCHL_I', 'PROFIL_I_R', 'VEH_INVL']\n","\n","accidents_df.SUR_COND = accidents_df.SUR_COND.astype('category')\n","accidents_df.MAX_SEV_IR = accidents_df.MAX_SEV_IR.astype('category')\n","\n","# convert the categorical data into dummy variables\n","# exclude the column for SUR_COND 9 = unknown\n","processed = pd.get_dummies(accidents_df, columns=['SUR_COND']).drop(columns=['SUR_COND_9'])\n","\n","outcome = 'MAX_SEV_IR'\n","predictors = [c for c in processed.columns if c != outcome]\n","\n","# partition data\n","X = processed[predictors]\n","y = processed[outcome]\n","train_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.4, random_state=1)\n","\n","# train neural network with 2 hidden nodes\n","clf = MLPClassifier(hidden_layer_sizes=[2], activation='logistic', solver='lbfgs',\n","                    random_state=1)\n","clf.fit(train_X, train_y.values)\n","\n","# training performance (use idxmax to revert the one-hot-encoding)\n","classificationSummary(train_y, clf.predict(train_X))\n","\n","# validation performance\n","classificationSummary(valid_y, clf.predict(valid_X))"]},{"cell_type":"markdown","metadata":{"id":"Oq-aIkEFfGtm"},"source":["## Fitting class probabilities separately"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:41.090116Z","iopub.status.busy":"2023-06-26T14:18:41.089859Z","iopub.status.idle":"2023-06-26T14:18:41.214858Z","shell.execute_reply":"2023-06-26T14:18:41.213976Z"},"id":"99y7hMXzfGtm","outputId":"a5a4ecf0-0230-49f8-cd08-0a4c2e962e87"},"outputs":[{"name":"stdout","output_type":"stream","text":["Confusion Matrix (Accuracy 0.8731)\n","\n","             Prediction\n","      Actual MAX_SEV_IR_0 MAX_SEV_IR_1 MAX_SEV_IR_2\n","MAX_SEV_IR_0          332            0            0\n","MAX_SEV_IR_1            0          170           10\n","MAX_SEV_IR_2           31           35           21\n","Confusion Matrix (Accuracy 0.8675)\n","\n","             Prediction\n","      Actual MAX_SEV_IR_0 MAX_SEV_IR_1 MAX_SEV_IR_2\n","MAX_SEV_IR_0          218            0            1\n","MAX_SEV_IR_1            0          113            6\n","MAX_SEV_IR_2           24           22           16\n"]}],"source":["accidents_df = dmba.load_data('accidentsnn.csv')\n","input_vars = ['ALCHL_I', 'PROFIL_I_R', 'VEH_INVL']\n","\n","accidents_df.SUR_COND = accidents_df.SUR_COND.astype('category')\n","accidents_df.MAX_SEV_IR = accidents_df.MAX_SEV_IR.astype('category')\n","\n","# convert the categorical data into dummy variables\n","processed = pd.get_dummies(accidents_df)\n","# drop the column for SUR_COND 9 = unknown\n","processed = processed.drop(columns=['SUR_COND_9'])\n","\n","outcome = ['MAX_SEV_IR_0', 'MAX_SEV_IR_1', 'MAX_SEV_IR_2']\n","predictors = [c for c in processed.columns if c not in outcome]\n","classes = sorted(outcome)\n","\n","# partition data\n","X = processed[predictors]\n","y = processed[outcome]\n","train_X, valid_X, train_y, valid_y = train_test_split(X, y, test_size=0.4, random_state=1)\n","\n","# train neural network with 2 hidden nodes\n","clf = MLPClassifier(hidden_layer_sizes=[2], activation='logistic', solver='lbfgs',\n","                    random_state=1, max_iter=500)\n","clf.fit(train_X, train_y)\n","\n","# training performance (use idxmax to revert the one-hot-encoding)\n","trainPrediction = pd.DataFrame(clf.predict(train_X), columns=outcome).idxmax(axis=1)\n","classificationSummary(train_y.idxmax(axis=1), trainPrediction, class_names=classes)\n","\n","# validation performance\n","validPrediction = pd.DataFrame(clf.predict(valid_X), columns=outcome).idxmax(axis=1)\n","classificationSummary(valid_y.idxmax(axis=1), validPrediction, class_names=classes)"]},{"cell_type":"markdown","metadata":{"id":"Z2WOgkrtfGtn"},"source":["## Grid search"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:41.217297Z","iopub.status.busy":"2023-06-26T14:18:41.216967Z","iopub.status.idle":"2023-06-26T14:18:43.272718Z","shell.execute_reply":"2023-06-26T14:18:43.271831Z"},"id":"tsEII3AefGtn","outputId":"ce9ff708-c8a3-48a9-ccbf-9eedce4b9223"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best score:  0.8614005602240896\n","Best parameters:  {'hidden_layer_sizes': [3]}\n"]}],"source":["from sklearn.model_selection import cross_val_score, train_test_split, GridSearchCV\n","\n","# train neural network with 2 hidden nodes\n","clf = MLPClassifier(hidden_layer_sizes=[2], activation='logistic', solver='lbfgs',\n","                    random_state=1, max_iter=500)\n","clf.fit(train_X, train_y.values)\n","\n","param_grid = {\n","    'hidden_layer_sizes': [[1], [2], [3], [4], [5]]\n","}\n","gridSearch = GridSearchCV(MLPClassifier(activation='logistic', solver='lbfgs', random_state=1, max_iter=3000),\n","                          param_grid, cv=5, n_jobs=-1, return_train_score=True)\n","gridSearch.fit(train_X, train_y)\n","print('Best score: ', gridSearch.best_score_)\n","print('Best parameters: ', gridSearch.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:43.275536Z","iopub.status.busy":"2023-06-26T14:18:43.275309Z","iopub.status.idle":"2023-06-26T14:18:43.283565Z","shell.execute_reply":"2023-06-26T14:18:43.282778Z"},"id":"9a5wLi1ofGtn","outputId":"9f57cde3-815f-47e3-b4eb-ede4e4632d17"},"outputs":[{"name":"stdout","output_type":"stream","text":["  param_hidden_layer_sizes  mean_test_score  std_test_score\n","0                      [1]         0.844762        0.011030\n","1                      [2]         0.848067        0.009913\n","2                      [3]         0.861401        0.023566\n","3                      [4]         0.861387        0.025918\n","4                      [5]         0.854748        0.023393\n"]}],"source":["display=['param_hidden_layer_sizes', 'mean_test_score', 'std_test_score']\n","print(pd.DataFrame(gridSearch.cv_results_)[display])"]},{"cell_type":"code","execution_count":null,"metadata":{"execution":{"iopub.execute_input":"2023-06-26T14:18:43.285772Z","iopub.status.busy":"2023-06-26T14:18:43.285493Z","iopub.status.idle":"2023-06-26T14:18:43.418606Z","shell.execute_reply":"2023-06-26T14:18:43.418126Z"},"id":"Nqb7kJH3fGtn","outputId":"1c3849b6-26f1-4402-d752-7ac0c2a1d1d6"},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["pd.DataFrame(gridSearch.cv_results_)[display].plot(x='param_hidden_layer_sizes',\n","                                                   y='mean_test_score', yerr='std_test_score', ylim=(0.8, 0.9))\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-bG7_sMYfGtn"},"outputs":[],"source":[]}],"metadata":{"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.4"},"colab":{"provenance":[{"file_id":"1ZiAi_Ipz64kLqYd1YNr-w5OT2lZ3m8rT","timestamp":1756364580582}]}},"nbformat":4,"nbformat_minor":0}